const btnPopup = document.getElementsByClassName("sub-button");
const btnPopupMobile = document.querySelector(".sub-button2");
const btnSendProject = document.getElementsByClassName("button-primary");
const btnCancelPopupMobile = document.querySelector(".btn-cancel");
const popup = document.querySelector(".modal");
const popupMobile = document.querySelector(".mobile-modal");
const btnSendPopup = document.querySelector(".modal_popup_main button");
const inputPopup = document.querySelector(".modal-input");
const inputPopupMobile = document.querySelector(".modal-input-mb");

const btnCheck = document.getElementsByClassName("cbPopup");
//Function
const handleClosePopUp = () => {
  popup.style.display = "none";
  popup.classList.remove("hidePopup");
};
const handleClosePopUpMobile = () => {
  popupMobile.style.display = "none";
  popupMobile.classList.remove("hidePopup");
};
const handleOpenPopUp = () => {
  popup.style.display = "block";
};
const handleOpenPopUpMobile = () => {
  popupMobile.style.display = "block";
};
const resetPopUp = () => {
  category = [];
  inputPopup.value = "";
};
const resetPopUpMobile = () => {
  category = [];
  inputPopupMobile.value = "";
};
const validateEmail = (email) => {
  return email.match(
    /^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/
  );
};

// Function end

// Click Send btn
// btnSendPopup.addEventListener("click", function () {
//   popup.classList.add("hidePopup");
// });
btnCancelPopupMobile.addEventListener("click", function () {
  popupMobile.classList.add("hidePopup");
});
// Click outside Popup
let category = [];
popup.addEventListener("click", function (e) {
  if (e.target === e.currentTarget) {
    popup.classList.add("hidePopup");
    resetPopUp();
  }
});

//Event Click  show popup
for (let i = 0; i < btnPopup.length; i++) {
  btnPopup[i].addEventListener("click", function (e) {
    handleOpenPopUp();
    resetPopUp();
    category.push(Number(e.target.dataset.id));
  });
}
//Event Click  show popup mobile
btnPopupMobile.addEventListener("click", function () {
  handleOpenPopUpMobile();
  resetPopUpMobile();
  for (let i = 0; btnCheck[i]; ++i) {
    btnCheck[i].checked = false;
  }
});
//event add animation when close
popup.addEventListener("animationend", function () {
  if (this.classList.contains("hidePopup")) {
    handleClosePopUp();
    resetPopUp();
  }
});
//event add animation when close Popup mobile
popupMobile.addEventListener("animationend", function () {
  if (this.classList.contains("hidePopup")) {
    handleClosePopUpMobile();
    resetPopUpMobile();
  }
});
// sendApi for PC screen
const formSendEmail = document.querySelector(".send-email");
formSendEmail.addEventListener("click", (event) => {
  const email = document.getElementById("email-project").value;
  if (!validateEmail(email)) {
    return;
  } else {
    handleClosePopUp();
    sendApi(email);
  }
});
// sendApi for Mobile screen
const formSendEmailMobile = document.querySelector(".send-email-mb");
formSendEmailMobile.addEventListener("click", (event) => {
  const emailMobile = document.getElementById("email-project-mb").value;
  if (!validateEmail(emailMobile)) {
    return;
  } else {
    for (let i = 0; btnCheck[i]; ++i) {
      if (btnCheck[i].checked) {
        category.push(Number(btnCheck[i].value));
      }
    }
    if (category.length === 0) {
      return;
    } else {
      handleClosePopUpMobile();
      sendApi(emailMobile);
    }
  }
});

function sendApi(email) {
  fetch("https://email.ncc.asia/ncc-site-api-sendmail", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      email: email,
      type: "case_study",
      category: category,
    }),
  })
    .then((res) => res.json())
    .then((result) => {
      if (result.success) {
        printMess(
          "nameSuccess",
          "Thank you, your submission has been received."
        );
        formEl.reset();
      } else {
        printMess("nameError", `${result.message}`);
      }
    })
    .catch((err) => {
      printMess(
        "nameError",
        "Oops, something went wrong. Please try again later."
      );
    });
}
const navCol = document.querySelector(".navbar-collapse");
const btnMenu = document.querySelector(".menu-icon-btn");
const home = document.querySelector(".home");
const listMenu = document.getElementsByClassName("list-menu");

for (let i = 0; i <= listMenu.length; i += 1) {
  listMenu[i] &&
    listMenu[i].addEventListener("click", function (e) {
      for (let i = 0; i <= listMenu.length; i += 1) {
        listMenu[i] && listMenu[i].classList.remove("active-menu");
      }
      listMenu[i].classList.add("active-menu");
    });
}

home &&
  home.addEventListener("click", () => {
    for (let i = 0; i <= listMenu.length; i += 1) {
      listMenu[i] && listMenu[i].classList.remove("active-menu");
    }
  });

btnMenu &&
  btnMenu.addEventListener("click", () => {
    if (navCol.classList.contains("navbar-collapse-active")) {
      navCol.classList.add("hidePopup");
      navCol && navCol.classList.remove("navbar-collapse-active");
      btnMenu.classList.remove("toggled");
    } else {
      navCol && navCol.classList.add("navbar-collapse-active");
      btnMenu.classList.add("toggled");
    }
  });

navCol.addEventListener("animationend", function () {
  if (this.classList.contains("hidePopup")) {
    this.classList.remove("hidePopup");
  }
});
function hide(element) {
  navCol && navCol.classList.toggle("navbar-collapse-active");
  navCol.classList.add("hidePopup");
  btnMenu.classList.remove("toggled");
}
function printMess(elemId, message) {
    document.getElementById(elemId).innerHTML = message;
  }
  const formEl = document.querySelector(".form");
  formEl.addEventListener("submit", (event) => {
    event.preventDefault();
    const fullName = document.getElementById("fullName").value;
    const email = document.getElementById("email").value;
    const phone = document.getElementById("phone").value;
    const content = document.getElementById("content").value;
    const gresponse = grecaptcha.getResponse();
  
    grecaptcha.ready(function () {
      if (
        fullName === "" ||
        email === "" ||
        phone === "" ||
        content === "" ||
        gresponse === ""
      ) {
        document.getElementById("nameMiss").innerHTML =
          "Please fill out all required fields.";
        return;
      }
  
      Array.from(formEl.elements).forEach(
        (formElement) => (formElement.disabled = true)
      );
      const data = {
        email: email,
        content: `Name: ${fullName}\n Phone: ${phone}\n Content: ${content}`,
        gresponse: gresponse,
      };
      const btnSubmit = formEl.querySelector('button[type="submit"]');
      const btnLoading = formEl.querySelector('button[type="button"]');
      btnSubmit.classList.add("d-none");
      btnLoading.classList.remove("d-none");
  
      fetch("https://email.ncc.asia/ncc-site-api-sendmail", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })
        .then((response) => response.json())
        .then((result) => {
          if (result.success) {
            printMess(
              "nameSuccess",
              "Thank you, your submission has been received."
            );
            formEl.reset();
          } else {
            printMess("nameError", `${result.message}`);
          }
        })
        .catch((err) => {
          printMess(
            "nameError",
            "Oops, something went wrong. Please try again later."
          );
        })
        .finally(() => {
          formEl.reset();
          Array.from(formEl.elements).forEach(
            (formElement) => (formElement.disabled = false)
          );
          btnSubmit.classList.remove("d-none");
          btnLoading.classList.add("d-none");
        });
    });
  });
  let valueDisplays = document.querySelectorAll(".num-count");
  let interval = 900;
  const areaTranNhan = document.getElementById("trannhan");
  const areaLeLinh = document.getElementById("lelinh");
  const areaManhTien = document.getElementById("manhtien");
  const areaPhucDuong = document.getElementById("phucduong");
  
  const elTranNhan = document.querySelector(".text_TranNhan");
  const elLeLinh = document.querySelector(".text_LeLinh");
  const elManhTien = document.querySelector(".text_ManhTien");
  const elPhucDuong = document.querySelector(".text_PhucDuong");
  
  function scrollTrigger(selector, options = {}) {
    let els = document.querySelectorAll(selector);
    els = Array.from(els);
    els.forEach((el) => {
      addObserver(el, options);
    });
  }
  function addObserver(el, options) {
    if (!("IntersectionObserver" in window)) {
      if (options.cb) {
        options.cb(el);
      } else {
        entry.target.classList.add("active");
      }
      return;
    }
    let observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          if (options.cb) {
            options.cb(el);
          } else {
            entry.target.classList.add("active");
            if (el.classList.contains("scrollBox2")) {
              valueDisplays.forEach((valueDisplay, index) => {
                setTimeout(function () {
                  let startValue = 0;
                  let endValue = parseInt(valueDisplay.getAttribute("data-val"));
                  let duration = Math.floor(interval / endValue);
                  let counter = setInterval(function () {
                    startValue += 1;
                    valueDisplay.textContent = startValue;
                    if (startValue == endValue) {
                      clearInterval(counter);
                    }
                  }, duration);
                }, index * 300);
              });
            }
          }
          observer.unobserve(entry.target);
        }
      });
    }, options);
    observer.observe(el);
  }
  scrollTrigger(".scrollBox", {
    rootMargin: "00px",
  });
  
  scrollTrigger(".scrollBox2", {
    rootMargin: "00px",
  });
  //animation number cout
  let width;
  let height;
  let widthImgTranNhan = 393 / 750;
  let heightImgTranNhan = 330 / 1000;
  let widthImgLeLinh = 146 / 750;
  let heightImgLeLinh = 405 / 1000;
  let widthImgPhucDuong = 324 / 750;
  let heightImgPhucDuong = 556 / 1000;
  let widthImgManhTien = 576 / 750;
  let heightImgManhTien = 473 / 1000;
  
  const changeCoords = (areaID) => {
    let newCoords;
    const radiusImg = 100 / 750;
    if (areaID == "trannhan") {
      newCoords = `${widthImgTranNhan * width}, ${heightImgTranNhan * height}, ${radiusImg * width}`;
    } else if (areaID == "lelinh") {
      newCoords = `${widthImgLeLinh * width}, ${heightImgLeLinh * height}, ${
        radiusImg * width
      }`;
    } else if (areaID == "phucduong") {
      newCoords = `${widthImgPhucDuong * width}, ${heightImgPhucDuong * height}, ${
        radiusImg * width
      }`;
    } else {
      newCoords = `${widthImgManhTien * width}, ${heightImgManhTien * height}, ${
        radiusImg * width
      }`;
    }
    const x = document.getElementById(areaID);
    x.setAttribute("coords", newCoords);
  };
  
  const setHoverArea = (el) => {
    const x = document.getElementById(el.id);
    let documentSize = document.body.clientWidth;
    let size = 20;
    if (documentSize <= 680 && documentSize >= 600) {
      size = 50;
    } else if (documentSize < 600 && documentSize >= 530) {
      size = 40;
    } else if (documentSize < 530 && documentSize >= 450) {
      size = 25;
    } else if (documentSize < 450) {
      size = 10;
    }
    if (el.id == "trannhan" && x.matches(":hover")) {
      elTranNhan.style.display = "block";
      const widthTranNhan = elTranNhan.clientWidth / 2;
      const heightTranNhan =
        elTranNhan.clientHeight + elTranNhan.clientHeight / 2 + size;
      elTranNhan.style.left = `${widthImgTranNhan * width - widthTranNhan}px`;
      elTranNhan.style.top = `${heightImgTranNhan * height - heightTranNhan}px`;
    } else if (el.id == "lelinh" && x.matches(":hover")) {
      elLeLinh.style.display = "block";
      const widthLeLinh = elLeLinh.clientWidth / 2;
      const heightLeLinh =
        elLeLinh.clientHeight + elLeLinh.clientHeight / 2 + size;
      elLeLinh.style.left = `${widthImgLeLinh * width - widthLeLinh}px`;
      elLeLinh.style.top = `${heightImgLeLinh * height - heightLeLinh}px`;
    } else if (el.id == "manhtien" && x.matches(":hover")) {
      elManhTien.style.display = "block";
      const widthManhTien = elManhTien.clientWidth / 2;
      const heightManhTien =
        elManhTien.clientHeight + elManhTien.clientHeight / 2 + size;
      elManhTien.style.left = `${widthImgManhTien * width - widthManhTien}px`;
      elManhTien.style.top = `${heightImgManhTien * height - heightManhTien}px`;
    } else if (el.id == "phucduong" && x.matches(":hover")) {
      elPhucDuong.style.display = "block";
      const widthPhucDuong = elPhucDuong.clientWidth / 2;
      const heightPhucDuong =
        elPhucDuong.clientHeight + elPhucDuong.clientHeight / 2 + size;
      elPhucDuong.style.left = `${widthImgPhucDuong * width - widthPhucDuong}px`;
      elPhucDuong.style.top = `${heightImgPhucDuong * height - heightPhucDuong}px`;
    }
  };
  
  const mapboss = document.getElementById("mapboss");
  function setCoordIntoAreaElement() {
    Array.from(mapboss.children).forEach((el) => changeCoords(el.id));
  }
  
  function setSizeBrower() {
    let img = document.querySelector(".our-image img");
    width = img.clientWidth;
    height = img.clientHeight;
  }
  
  function setHover() {
    areaTranNhan.addEventListener("mousemove", function checkHover() {
      setHoverArea(areaTranNhan);
    });
  
    areaLeLinh.addEventListener("mousemove", function checkHover() {
      setHoverArea(areaLeLinh);
    });
  
    areaPhucDuong.addEventListener("mousemove", function checkHover() {
      setHoverArea(areaPhucDuong);
    });
  
    areaManhTien.addEventListener("mousemove", function checkHover() {
      setHoverArea(areaManhTien);
    });
  
    areaTranNhan.addEventListener("mouseout", function checkHover() {
      elTranNhan.style.display = "none";
    });
  
    areaLeLinh.addEventListener("mouseout", function checkHover() {
      elLeLinh.style.display = "none";
    });
  
    areaPhucDuong.addEventListener("mouseout", function checkHover() {
      elPhucDuong.style.display = "none";
    });
  
    areaManhTien.addEventListener("mouseout", function checkHover() {
      elManhTien.style.display = "none";
    });
  }
  
  setSizeBrower();
  setHover();
  window.addEventListener("resize", () => {
    elTranNhan.style.display = "none";
    elLeLinh.style.display = "none";
    elPhucDuong.style.display = "none";
    elManhTien.style.display = "none";
    setSizeBrower();
    setHover();
    setCoordIntoAreaElement();
  });
  setCoordIntoAreaElement();
  
  
  function goToByScroll(id){
    const scrollTo = document.getElementById(id);
    const topPos = scrollTo.offsetTop;
    window.scroll(0, topPos);
  }
  !(function () {
    var t = function (t) {
      (this.input = null),
        (this.inputDisplay = null),
        (this.slider = null),
        (this.sliderWidth = 0),
        (this.sliderLeft = 0),
        (this.pointerWidth = 0),
        (this.pointerR = null),
        (this.pointerL = null),
        (this.activePointer = null),
        (this.selected = null),
        (this.scale = null),
        (this.step = 0),
        (this.tipL = null),
        (this.tipR = null),
        (this.timeout = null),
        (this.valRange = !1),
        (this.values = { start: null, end: null }),
        (this.conf = {
          target: null,
          values: null,
          set: null,
          range: !1,
          width: null,
          scale: !0,
          labels: !0,
          tooltip: !0,
          step: null,
          disabled: !1,
          onChange: null,
        }),
        (this.cls = {
          container: "rs-container",
          background: "rs-bg",
          selected: "rs-selected",
          pointer: "rs-pointer",
          scale: "rs-scale",
          noscale: "rs-noscale",
          tip: "rs-tooltip",
        });
      for (var i in this.conf) t.hasOwnProperty(i) && (this.conf[i] = t[i]);
      this.init();
    };
    (t.prototype.init = function () {
      return (
        "object" == typeof this.conf.target
          ? (this.input = this.conf.target)
          : (this.input = document.getElementById(
              this.conf.target.replace("#", "")
            )),
        this.input
          ? ((this.inputDisplay = getComputedStyle(this.input, null).display),
            (this.input.style.display = "none"),
            (this.valRange = !(this.conf.values instanceof Array)),
            !this.valRange ||
            (this.conf.values.hasOwnProperty("min") &&
              this.conf.values.hasOwnProperty("max"))
              ? this.createSlider()
              : console.log("Missing min or max value..."))
          : console.log("Cannot find target element...")
      );
    }),
      (t.prototype.createSlider = function () {
        return (
          (this.slider = i("div", this.cls.container)),
          (this.slider.innerHTML = '<div class="rs-bg"></div>'),
          (this.selected = i("div", this.cls.selected)),
          (this.pointerL = i("div", this.cls.pointer, ["dir", "left"])),
          (this.scale = i("div", this.cls.scale)),
          this.conf.tooltip &&
            ((this.tipL = i("div", this.cls.tip)),
            (this.tipR = i("div", this.cls.tip)),
            this.pointerL.appendChild(this.tipL)),
          this.slider.appendChild(this.selected),
          this.slider.appendChild(this.scale),
          this.slider.appendChild(this.pointerL),
          this.conf.range &&
            ((this.pointerR = i("div", this.cls.pointer, ["dir", "right"])),
            this.conf.tooltip && this.pointerR.appendChild(this.tipR),
            this.slider.appendChild(this.pointerR)),
          this.input.parentNode.insertBefore(this.slider, this.input.nextSibling),
          this.conf.width &&
            (this.slider.style.width = parseInt(this.conf.width) + "px"),
          (this.sliderLeft = this.slider.getBoundingClientRect().left),
          (this.sliderWidth = this.slider.clientWidth),
          (this.pointerWidth = this.pointerL.clientWidth),
          this.conf.scale || this.slider.classList.add(this.cls.noscale),
          this.setInitialValues()
        );
      }),
      (t.prototype.setInitialValues = function () {
        if (
          (this.disabled(this.conf.disabled),
          this.valRange && (this.conf.values = s(this.conf)),
          (this.values.start = 0),
          (this.values.end = this.conf.range ? this.conf.values.length - 1 : 0),
          this.conf.set && this.conf.set.length && n(this.conf))
        ) {
          var t = this.conf.set;
          this.values.end = this.conf.values.indexOf(t[0]);
        }
        return this.createScale();
      }),
      (t.prototype.createScale = function (t) {
        this.step = this.sliderWidth / (this.conf.values.length - 1);
        for (var e = 0, s = this.conf.values.length; e < s; e++) {
          var n = i("span"),
            l = i("ins");
          n.appendChild(l),
            this.scale.appendChild(n),
            (n.style.width = e === s - 1 ? 0 : this.step - 0.1 + "px"),
            this.conf.labels
              ? (l.innerHTML = this.conf.values[e])
              : (0 !== e && e !== s - 1) || (l.innerHTML = this.conf.values[e]),
            (l.style.marginLeft = (l.clientWidth / 2) * -1 + "px");
        }
        return this.addEvents();
      }),
      (t.prototype.updateScale = function () {
        this.step = this.sliderWidth / (this.conf.values.length - 1);
        for (
          var t = this.slider.querySelectorAll("span"), i = 0, e = t.length;
          i < e;
          i++
        )
          t[i].style.width = this.step + "px";
        return this.setValues();
      }),
      (t.prototype.addEvents = function () {
        var t = this.slider.querySelectorAll("." + this.cls.pointer),
          i = this.slider.querySelectorAll("span");
        e(document, "mousemove touchmove", this.move.bind(this)),
          e(document, "mouseup touchend touchcancel", this.drop.bind(this));
        for (var s = 0, n = t.length; s < n; s++)
          e(t[s], "mousedown touchstart", this.drag.bind(this));
        for (var s = 0, n = i.length; s < n; s++)
          e(i[s], "click", this.onClickPiece.bind(this));
        return (
          window.addEventListener("resize", this.onResize.bind(this)),
          this.setValues()
        );
      }),
      (t.prototype.drag = function (t) {
        if ((t.preventDefault(), !this.conf.disabled)) {
          var i = t.target.getAttribute("data-dir");
          return (
            "left" === i && (this.activePointer = this.pointerL),
            "right" === i && (this.activePointer = this.pointerR),
            this.slider.classList.add("sliding")
          );
        }
      }),
      (t.prototype.move = function (t) {
        if (this.activePointer && !this.conf.disabled) {
          var i =
            ("touchmove" === t.type ? t.touches[0].clientX : t.pageX) -
            this.sliderLeft -
            this.pointerWidth / 2;
          return (
            (i = Math.round(i / this.step)) <= 0 && (i = 0),
            i > this.conf.values.length - 1 && (i = this.conf.values.length - 1),
            (this.values.end = i),
            this.setValues()
          );
        }
      }),
      (t.prototype.drop = function () {
        this.activePointer = null;
      }),
      (t.prototype.setValues = function (t, i) {
        var e = this.conf.range ? "start" : "end";
        let month;
        if (
          this.conf.values[this.values.end] == 1 ||
          this.conf.values[this.values.end] == 0
        ) {
          month = "Month";
        } else {
          month = "Months";
        }
        return (
          t &&
            this.conf.values.indexOf(t) > -1 &&
            (this.values[e] = this.conf.values.indexOf(t)),
          i &&
            this.conf.values.indexOf(i) > -1 &&
            (this.values.end = this.conf.values.indexOf(i)),
          this.conf.range &&
            this.values.start > this.values.end &&
            (this.values.start = this.values.end),
          (this.pointerL.style.left =
            this.values[e] * this.step - this.pointerWidth / 2 - 1 + "px"),
          (this.conf.tooltip &&
            (this.tipL.innerHTML = `${this.conf.values[this.values.end]} ${month}`),
          (this.input.value = this.conf.values[this.values.end])),
          this.values.end > this.conf.values.length - 1 &&
            (this.values.end = this.conf.values.length - 1),
          this.values.start < 0 && (this.values.start = 0),
          (this.selected.style.width =
            (this.values.end - this.values.start) * this.step + "px"),
          (this.selected.style.left = this.values.start * this.step + "px"),
          this.onChange()
        );
      }),
      (t.prototype.onClickPiece = function (t) {
        if (!this.conf.disabled) {
          var i = Math.round((t.clientX - this.sliderLeft) / this.step);
          return (
            i > this.conf.values.length - 1 && (i = this.conf.values.length - 1),
            i < 0 && (i = 0),
            this.conf.range && i - this.values.start <= this.values.end - i
              ? (this.values.start = i)
              : (this.values.end = i),
            this.slider.classList.remove("sliding"),
            this.setValues()
          );
        }
      }),
      (t.prototype.onChange = function () {
        var t = this;
        this.timeout && clearTimeout(this.timeout),
          (this.timeout = setTimeout(function () {
            if (t.conf.onChange && "function" == typeof t.conf.onChange)
              return t.conf.onChange(t.input.value);
          }, 500));
      }),
      (t.prototype.onResize = function () {
        return (
          (this.sliderLeft = this.slider.getBoundingClientRect().left),
          (this.sliderWidth = this.slider.clientWidth),
          this.updateScale()
        );
      }),
      (t.prototype.disabled = function (t) {
        (this.conf.disabled = t),
          this.slider.classList[t ? "add" : "remove"]("disabled");
      }),
      (t.prototype.getValue = function () {
        return this.input.value;
      }),
      (t.prototype.destroy = function () {
        (this.input.style.display = this.inputDisplay), this.slider.remove();
      });
    var i = function (t, i, e) {
        var s = document.createElement(t);
        return (
          (s.id = "slider"),
          i && (s.className = i),
          e && 2 === e.length && s.setAttribute("data-" + e[0], e[1]),
          s
        );
      },
      e = function (t, i, e) {
        for (var s = i.split(" "), n = 0, l = s.length; n < l; n++)
          t.addEventListener(s[n], e);
      },
      s = function (t) {
        var i = [],
          e = t.values.max - t.values.min;
        if (!t.step)
          return console.log("No step defined..."), [t.values.min, t.values.max];
        for (var s = 0, n = e / t.step; s < n; s++)
          i.push(t.values.min + s * t.step);
        return i.indexOf(t.values.max) < 0 && i.push(t.values.max), i;
      },
      n = function (t) {
        return !t.set || t.set.length < 1
          ? null
          : t.values.indexOf(t.set[0]) < 0
          ? null
          : !t.range ||
            !(t.set.length < 2 || t.values.indexOf(t.set[1]) < 0) ||
            null;
      };
    window.rSlider = t;
  })();
  const checkboxWeb = document.getElementById("web");
  const checkboxMobile = document.getElementById("mobile");
  const checkboxGame = document.getElementById("game");
  const checkboxOther = document.getElementById("other");
  const checkboxes = document.getElementsByName("check");
  
  const elLine1 = document.getElementById("line1");
  const elLine2 = document.getElementById("line2");
  const elLine3 = document.getElementById("line3");
  const elLine4 = document.getElementById("line4");
  const elLine5 = document.getElementById("line5");
  const elLineGame = document.getElementById("lineGame");
  
  const bar2 = document.querySelector(".bar2");
  const bar3 = document.querySelector(".bar3");
  
  const timeline = document.querySelector(".timeline");
  const headingTitle = document.getElementById("text_progress");
  const form = document.querySelector(".ncc_project-form");
  const formOther1 = document.querySelector(".ncc_project-form_other1");
  const formOther2 = document.querySelector(".ncc_project-form_other2");
  const formOther3 = document.querySelector(".ncc_project-form_other3");
  const formOther4 = document.querySelector(".ncc_project-form_other4");
  const formOther5 = document.querySelector(".ncc_project-form_other5");
  const btnSubmit = document.getElementById("button-submit");
  const btnSubmitOther1 = document.getElementById("button-submit_other1");
  const btnSubmitOther2 = document.getElementById("button-submit_other2");
  const btnSubmitOther3 = document.getElementById("button-submit_other3");
  const btnSubmitOther4 = document.getElementById("button-submit_other4");
  const btnSubmitOther5 = document.getElementById("button-submit_other5");
  const btnBackOther1 = document.getElementById("button-back_other1");
  const btnBackOther2 = document.getElementById("button-back_other2");
  const btnBackOther3 = document.getElementById("button-back_other3");
  const btnBackOther4 = document.getElementById("button-back_other4");
  const btnBackOther5 = document.getElementById("button-back_other5");
  
  const formGame1 = document.querySelector(".ncc_project-form_game1");
  const formGame2 = document.querySelector(".ncc_project-form_game2");
  const formGame3 = document.querySelector(".ncc_project-form_game3");
  const formGame4 = document.querySelector(".ncc_project-form_game4");
  const formGame5 = document.querySelector(".ncc_project-form_game5");
  const btnSubmitGame1 = document.getElementById("button-submit_game1");
  const btnSubmitGame2 = document.getElementById("button-submit_game2");
  const btnSubmitGame3 = document.getElementById("button-submit_game3");
  const btnSubmitGame4 = document.getElementById("button-submit_game4");
  const btnSubmitGame5 = document.getElementById("button-submit_game5");
  const btnBackGame1 = document.getElementById("button-back_game1");
  const btnBackGame2 = document.getElementById("button-back_game2");
  const btnBackGame3 = document.getElementById("button-back_game3");
  const btnBackGame4 = document.getElementById("button-back_game4");
  const btnBackGame5 = document.getElementById("button-back_game5");
  
  const elReactjs = document.getElementById("reactjs");
  const elAngularjs = document.getElementById("angularjs");
  const elDotnet = document.getElementById("dotnet");
  const elNodejs = document.getElementById("nodejs");
  const elK8S = document.getElementById("K8S");
  const elVuejs = document.getElementById("vuejs");
  const elJava = document.getElementById("java");
  const elPhp = document.getElementById("php");
  const elServerless = document.getElementById("serverless");
  const elRequirement = document.getElementById("requirement");
  
  const elAuthentication = document.getElementById("authentication");
  const elDashboard = document.getElementById("dashboard");
  const elCamera = document.getElementById("camera");
  const elCart = document.getElementById("cart");
  const elManagement = document.getElementById("management");
  const elSocial = document.getElementById("social");
  const elLocations = document.getElementById("locations");
  const elSimplified = document.getElementById("simplified");
  const elGateway = document.getElementById("gateway");
  const elMigration = document.getElementById("migration");
  
  const elIdea = document.getElementById("idea");
  const elSketches = document.getElementById("sketches");
  const elDetailed = document.getElementById("detailed");
  const elRebuild = document.getElementById("rebuild");
  const elMaintenance = document.getElementById("maintenance");
  
  const elCms = document.getElementById("cms");
  const elEducation = document.getElementById("education");
  const elTournament = document.getElementById("tournament");
  const elProducts = document.getElementById("products");
  const elMedia = document.getElementById("media");
  const elCommerce = document.getElementById("commerce");
  const elStock = document.getElementById("stock");
  const elTravel = document.getElementById("travel");
  
  //game
  const elCocos = document.getElementById("cocos");
  const elUnity = document.getElementById("unity");
  const elUe = document.getElementById("ue");
  const elRequirementGame = document.getElementById("requirementGame");
  const elWebGame = document.getElementById("webGame");
  const elIos = document.getElementById("ios");
  const elAndroid = document.getElementById("android");
  const elDesktop = document.getElementById("desktop");
  
  const elPurchase = document.getElementById("purchase");
  const elQuest = document.getElementById("quest");
  const elIllustrator = document.getElementById("illustrator");
  const elPvp = document.getElementById("pvp");
  const elServer = document.getElementById("server");
  const elBattles = document.getElementById("battles");
  const elApplication = document.getElementById("application");
  const elUsage = document.getElementById("Usage");
  
  const elCasualKids = document.getElementById("casualKids");
  const elRpgAction = document.getElementById("rpgAction");
  const elAutoBattler = document.getElementById("autoBattler");
  const elQuizzes = document.getElementById("quizzes");
  
  const elIdeaGame = document.getElementById("ideaGame");
  const elSketchesGame = document.getElementById("sketchesGame");
  const elPrototypes = document.getElementById("prototypes");
  const elExisting = document.getElementById("existing");
  const elMaintenanceProduct = document.getElementById("maintenanceProduct");
  const aleartsurvey = document.querySelector("#aleart-survey");
  
  let content = "";
  let contentFormOther1 = "";
  let contentFormOther2 = "";
  let contentFormOther3 = "";
  let contentFormGame1 = "";
  let contentFormGame2 = "";
  let contentFormGame3 = "";
  let contentFormGame4 = "";
  let newVal = 1;
  let checkedForm = 0;
  function setTextHtml(id, sum) {
    headingTitle.innerHTML = "";
    let textH3;
    if (sum) {
      textH3 = document.createTextNode(`Progress (${id}/${sum})`);
    } else {
      textH3 = document.createTextNode(`Progress (${id}/5)`);
    }
    headingTitle.appendChild(textH3);
  }
  
  function handleActiveFormOther() {
    form.style.display = "none";
    timeline.style.display = "block";
    formOther1.style.display = "block";
    setTextHtml(1);
    elLine1.style.backgroundColor = "var(--blue-color)";
  }
  btnSubmit.addEventListener("click", function (e) {
    if (
      checkboxWeb.checked &&
      !checkboxMobile.checked &&
      !checkboxGame.checked &&
      !checkboxOther.checked
    ) {
      elLineGame.style.display = "none";
      checkedForm = 0;
      handleActiveFormOther();
    } else if (
      checkboxMobile.checked &&
      !checkboxWeb.checked &&
      !checkboxGame.checked &&
      !checkboxOther.checked
    ) {
      elLineGame.style.display = "none";
      checkedForm = 0;
      handleActiveFormOther();
    } else if (
      checkboxGame.checked &&
      !checkboxMobile.checked &&
      !checkboxWeb.checked &&
      !checkboxOther.checked
    ) {
      elLineGame.style.display = "block";
      checkedForm = 1;
      handleActiveFormGame();
    } else if (
      checkboxOther.checked &&
      !checkboxMobile.checked &&
      !checkboxGame.checked &&
      !checkboxWeb.checked
    ) {
      elLineGame.style.display = "none";
      checkedForm = 0;
      handleActiveFormOther();
    } else {
      checkboxes.forEach((item) => {
        item.parentElement.style.borderColor = "#FF7B87";
        aleartsurvey.style.display = "block";
      });
    }
  });
  
  function handleDeactiveFormOther1() {
    form.style.display = "block";
    formOther1.style.display = "none";
    elLine1.style.backgroundColor = "var(--white-color)";
    timeline.style.display = "none";
  }
  btnBackOther1.addEventListener("click", function (e) {
    handleDeactiveFormOther1();
    content = "";
  });
  
  function handleActiveFormOther1() {
    let contentOther1 = "- Which technology do you prefer for the project? \n";
    formOther1.style.display = "none";
    formOther2.style.display = "block";
    elLine2.style.backgroundColor = "var(--blue-color)";
    if (elReactjs.checked) {
      content = content + "Reactjs\n";
    }
    if (elAngularjs.checked) {
      content = content + "AngularJs\n";
    }
    if (elDotnet.checked) {
      content = content + "Dotnet Framework\n";
    }
    if (elNodejs.checked) {
      content = content + "NodeJS Stack\n";
    }
    if (elK8S.checked) {
      content = content + "K8S\n";
    }
    if (elVuejs.checked) {
      content = content + "VueJs\n";
    }
    if (elJava.checked) {
      content = content + "Java Spring Boot\n";
    }
    if (elPhp.checked) {
      content = content + "PHP\n";
    }
    if (elServerless.checked) {
      content = content + "Serverlesss\n";
    }
    if (elRequirement.checked) {
      content = content + "Can be anything that fit project requirement\n";
    }
    const technologys = document.getElementById("technologys").value;
    if (technologys !== "") {
      content = content + technologys;
    }
    if (content !== "") {
      content = contentOther1 + content + "\n";
    }
    contentFormOther1 = content;
    setTextHtml(2);
  }
  btnSubmitOther1.addEventListener("click", function (e) {
    handleActiveFormOther1();
  });
  
  function handleDeactiveFormOther2() {
    formOther1.style.display = "block";
    formOther2.style.display = "none";
    elLine2.style.backgroundColor = "var(--white-color)";
    setTextHtml(1);
  }
  btnBackOther2.addEventListener("click", function (e) {
    handleDeactiveFormOther2();
    content = "";
  });
  
  function handleActiveFormOther2() {
    formOther2.style.display = "none";
    formOther3.style.display = "block";
    elLine3.style.backgroundColor = "var(--blue-color)";
    let contentOther2 = "\n- What features do you need on your project?";
    content = content + contentOther2 + "\n";
    if (elAuthentication.checked) {
      content = content + "Normal Authentication\n";
    }
    if (elDashboard.checked) {
      content = content + "Dashboard\n";
    }
    if (elCamera.checked) {
      content = content + "Camera/Photos/Videos\n";
    }
    if (elCart.checked) {
      content = content + "Shopping Cart\n";
    }
    if (elManagement.checked) {
      content = content + "Security Management\n";
    }
    if (elSocial.checked) {
      content = content + "Social network Authentication\n";
    }
    if (elLocations.checked) {
      content = content + "Maps/Directions/Locations\n";
    }
    if (elSimplified.checked) {
      content = content + "Simplified/Extended Chat\n";
    }
    if (elGateway.checked) {
      content = content + "Payment Gateway\n";
    }
    if (elMigration.checked) {
      content = content + "Integration/Migration\n";
    }
    const features = document.getElementById("features").value;
    if (features !== "") {
      content = content + features + "\n";
    }
    contentFormOther2 = content;
    setTextHtml(3);
  }
  btnSubmitOther2.addEventListener("click", function (e) {
    handleActiveFormOther2();
  });
  
  function handleDeactiveFormOther3() {
    formOther2.style.display = "block";
    formOther3.style.display = "none";
    elLine3.style.backgroundColor = "var(--white-color)";
    setTextHtml(2);
  }
  btnBackOther3.addEventListener("click", function (e) {
    handleDeactiveFormOther3();
    content = contentFormOther1;
  });
  
  function handleActiveFormOther3() {
    formOther3.style.display = "none";
    formOther4.style.display = "block";
    elLine4.style.backgroundColor = "var(--blue-color)";
    let contentOther3 = "\n- Can we know about the state of project?";
    content = content + contentOther3 + "\n";
    if (elIdea.checked) {
      content = content + "Idea\n";
    }
    if (elSketches.checked) {
      content = content + "Sketches\n";
    }
    if (elDetailed.checked) {
      content = content + "Detailed Prototypes\n";
    }
    if (elRebuild.checked) {
      content = content + "Rebuild existing product\n";
    }
    if (elMaintenance.checked) {
      content = content + "Maintenance of product\n";
    }
    contentFormOther3 = content;
    setTextHtml(4);
  }
  btnSubmitOther3.addEventListener("click", function (e) {
    handleActiveFormOther3();
    if (bar3) bar3.style.display = "none";
    if (bar2) bar2.style.display = "block";
    runRangerOther();
  });
  
  var runRangerOther = function () {
    const parent = document.getElementById("slider2-container").parentNode;
    document.getElementById("slider2-container").remove();
    parent.innerHTML = ` <div class="slider-container"  id="slider2-container">
    <input type="text" id="slider2" class="slider" style="display:block"/>
  </div>`;
    new rSlider({
      target: "#slider2",
      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
      range: false,
      set: [1],
      onChange: function (vals) {
        newVal = vals;
      },
    });
  };
  
  function handleDeactiveFormOther4() {
    formOther3.style.display = "block";
    formOther4.style.display = "none";
    elLine4.style.backgroundColor = "var(--white-color)";
    setTextHtml(3);
  }
  btnBackOther4.addEventListener("click", function (e) {
    handleDeactiveFormOther4();
    content = contentFormOther2;
  });
  
  function setTextSlider() {
    if (newVal == 1) {
      content =
        content +
        "\n- Your expected timeline to finish the project?\n" +
        `0${newVal} Month` +
        "\n";
    } else if (newVal == 10) {
      content =
        content +
        "\n- Your expected timeline to finish the project?\n" +
        `0${newVal} Months` +
        "\n";
    } else {
      content =
        content +
        "\n- Your expected timeline to finish the project?\n" +
        `${newVal} Months` +
        "\n";
    }
  }
  
  function handleActiveFormOther4(id) {
    el = `elLine${id}`;
    formOther4.style.display = "none";
    formOther5.style.display = "block";
    if (el == "elLine5") {
      elLine5.style.backgroundColor = "var(--blue-color)";
    }
    let contentOther4 = "\n- What features do you need on your project?";
    content = content + contentOther4 + "\n";
    if (elCms.checked) {
      content = content + "CMS\n";
    }
    if (elEducation.checked) {
      content = content + "Education\n";
    }
    if (elTournament.checked) {
      content = content + "Esport/Tournament\n";
    }
    if (elProducts.checked) {
      content = content + "Showroom of products\n";
    }
    if (elMedia.checked) {
      content = content + "Social Media\n";
    }
    if (elCommerce.checked) {
      content = content + "E-commerce\n";
    }
    if (elStock.checked) {
      content = content + "Stock/Crypto Currency/Financial Market\n";
    }
    if (elTravel.checked) {
      content = content + "Travel\n";
    }
    const description = document.getElementById("description").value;
    if (description !== "") {
      content =
        content +
        "\n- Can you give us other short description of your project?\n" +
        description +
        "\n";
    }
    const websites = document.getElementById("websites").value;
    if (websites !== "") {
      content =
        content +
        "\n- Are there websites that you want us to based on?\n" +
        websites +
        "\n";
    }
    const improve = document.getElementById("improve").value;
    if (improve !== "") {
      content =
        content +
        "\n- What do you expect to improve from those website?\n" +
        improve +
        "\n";
    }
    setTextSlider();
    setTextHtml(5);
  }
  btnSubmitOther4.addEventListener("click", function (e) {
    handleActiveFormOther4(5);
  });
  
  function handleDeactiveFormOther5(id) {
    if (checkedForm == 0) {
      el = `elLine${id}`;
      formOther4.style.display = "block";
      formOther5.style.display = "none";
      if (el == "elLine5") {
        elLine5.style.backgroundColor = "var(--white-color)";
      }
      setTextHtml(4);
      content = contentFormOther3;
    } else {
      formGame5.style.display = "block";
      formOther5.style.display = "none";
      elLine5.style.backgroundColor = "var(--white-color)";
      setTextHtml(5, 6);
      content = contentFormGame4;
    }
  }
  btnBackOther5.addEventListener("click", function (e) {
    handleDeactiveFormOther5(5);
  });
  
  const validateEmailSur = (email) => {
    return email.match(
      /^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/
    );
  };
  
  const validatePhoneSurvey = (phoneSurvey) => {
    return phoneSurvey.match(
      /^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/
    );
  };
  
  function handleActiveFormOther5(data) {
    fetch("https://email.ncc.asia/ncc-site-api-sendmail", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    })
      .then((res) => res.json())
      .then((result) => {
        if (result.success) {
          printMess(
            "nameSuccessSurvey",
            "Thank you, your submission has been received."
          );
          formEl.reset();
        } else {
          printMess("nameErrorSurvey", `${result.message}`);
        }
      })
      .catch((err) => {
        printMess(
          "nameErrorSurvey",
          "Oops, something went wrong. Please try again later."
        );
      });
    formOther5.style.display = "none";
    timeline.style.display = "none";
    form.style.display = "block";
    elLineGame.style.backgroundColor = "var(--white-color)";
    elLine5.style.backgroundColor = "var(--white-color)";
    elLine4.style.backgroundColor = "var(--white-color)";
    elLine3.style.backgroundColor = "var(--white-color)";
    elLine2.style.backgroundColor = "var(--white-color)";
    elLine1.style.backgroundColor = "var(--white-color)";
    content = "";
    checkedForm = 0;
  }
  btnSubmitOther5.addEventListener("click", function (e) {
    const fullName = document.getElementById("nameSurvey").value;
    const email = document.getElementById("mailSurvey").value;
    const phone = document.getElementById("phoneSurvey").value;
    const textMail = document.getElementById("contentSurvey").value;
    const contentEmail = `\nsend: Name: ${fullName}, Phone: ${phone}, Content: ${textMail}`;
    content = content + contentEmail;
    const data = {
      email: email,
      content: content,
    };
  
    if (!validatePhoneSurvey(phone)) {
      return;
    }
    if (!validateEmailSur(email)) {
      return;
    }
    handleActiveFormOther5(data);
  });
  
  //game
  function handleActiveFormGame() {
    form.style.display = "none";
    timeline.style.display = "block";
    formGame1.style.display = "block";
    setTextHtml(1, 6);
    elLine1.style.backgroundColor = "var(--blue-color)";
  }
  
  function handleDeactiveFormGame1() {
    form.style.display = "block";
    formGame1.style.display = "none";
    elLine1.style.backgroundColor = "var(--white-color)";
    timeline.style.display = "none";
  }
  btnBackGame1.addEventListener("click", function (e) {
    handleDeactiveFormGame1();
    content = "";
  });
  
  function handleActiveFormGame1() {
    let contentGame1 = "- Which technology do you prefer for the project? \n";
    formGame1.style.display = "none";
    formGame2.style.display = "block";
    elLine2.style.backgroundColor = "var(--blue-color)";
    if (elCocos.checked) {
      content = content + "Cocos\n";
    }
    if (elUnity.checked) {
      content = content + "Unity\n";
    }
    if (elUe.checked) {
      content = content + "ue4/5\n";
    }
    if (elRequirementGame.checked) {
      content = content + "Can be anything that fit game requirement\n";
    }
    const technologysGame = document.getElementById("technologysGame").value;
    if (technologysGame !== "") {
      content = content + technologysGame + "\n";
    }
    content = content + "\nWhich plattform do you want to use?\n";
    if (elWebGame.checked) {
      content = content + "Web\n";
    }
    if (elIos.checked) {
      content = content + "Ios\n";
    }
    if (elAndroid.checked) {
      content = content + "Android\n";
    }
    if (elDesktop.checked) {
      content = content + "Desktop\n";
    }
    const plattforms = document.getElementById("plattforms").value;
    if (plattforms !== "") {
      content = content + plattforms;
    }
    if (content !== "") {
      content = contentGame1 + content + "\n";
    }
    setTextHtml(2, 6);
    contentFormGame1 = content;
  }
  btnSubmitGame1.addEventListener("click", function (e) {
    handleActiveFormGame1();
  });
  
  function handleDeactiveFormGame2() {
    formGame1.style.display = "block";
    formGame2.style.display = "none";
    elLine2.style.backgroundColor = "var(--white-color)";
    setTextHtml(1, 6);
  }
  btnBackGame2.addEventListener("click", function (e) {
    handleDeactiveFormGame2();
    setTextHtml(1, 6);
    content = "";
  });
  
  function handleActiveFormGame2() {
    formGame2.style.display = "none";
    formGame3.style.display = "block";
    elLine3.style.backgroundColor = "var(--blue-color)";
    let contentGame2 = "\n- What features do you need on your project?";
    content = content + contentGame2 + "\n";
    if (elPurchase.checked) {
      content = content + "In app purchase\n";
    }
    if (elQuest.checked) {
      content = content + "Daily/Achievement Quest\n";
    }
    if (elIllustrator.checked) {
      content = content + "3D illustrator\n";
    }
    if (elPvp.checked) {
      content = content + "Real Time PvP\n";
    }
    if (elServer.checked) {
      content = content + "Server/Private Chat\n";
    }
    if (elBattles.checked) {
      content = content + "Battles\n";
    }
    if (elApplication.checked) {
      content = content + "Damage/Level/… calculation and application\n";
    }
    if (elUsage.checked) {
      content = content + "Offline Usage\n";
    }
    setTextHtml(3, 6);
    contentFormGame2 = content;
  }
  btnSubmitGame2.addEventListener("click", function (e) {
    handleActiveFormGame2();
  });
  
  function handleDeactiveFormGame3() {
    formGame2.style.display = "block";
    formGame3.style.display = "none";
    elLine3.style.backgroundColor = "var(--white-color)";
    setTextHtml(2, 6);
  }
  btnBackGame3.addEventListener("click", function (e) {
    handleDeactiveFormGame3();
    content = contentFormGame1;
  });
  
  function handleActiveFormGame3() {
    formGame3.style.display = "none";
    formGame4.style.display = "block";
    elLine4.style.backgroundColor = "var(--blue-color)";
    let contentGame3 = "\n- What is the expertise of the game?";
    content = content + contentGame3 + "\n";
    if (elCasualKids.checked) {
      content = content + "EDUCATION/CASUAL/KIDS\n";
    }
    if (elRpgAction.checked) {
      content = content + "RPG/ACTION/ADVENTURE\n";
    }
    if (elAutoBattler.checked) {
      content = content + "AUTO BATTLER\n";
    }
    if (elQuizzes.checked) {
      content = content + "IQ/QUIZZES\n";
    }
    setTextHtml(4, 6);
    contentFormGame3 = content;
  }
  btnSubmitGame3.addEventListener("click", function (e) {
    handleActiveFormGame3();
  });
  
  function handleDeactiveFormGame4() {
    formGame3.style.display = "block";
    formGame4.style.display = "none";
    elLine4.style.backgroundColor = "var(--white-color)";
    setTextHtml(3, 6);
  }
  btnBackGame4.addEventListener("click", function (e) {
    handleDeactiveFormGame4();
    content = contentFormGame2;
  });
  
  function handleActiveFormGame4() {
    formGame4.style.display = "none";
    formGame5.style.display = "block";
    let contentGame4 = "\n- Can we know about the state of project?";
    content = content + contentGame4 + "\n";
    if (elIdeaGame.checked) {
      content = content + "Idea\n";
    }
    if (elSketchesGame.checked) {
      content = content + "Sketches\n";
    }
    if (elPrototypes.checked) {
      content = content + "Detailed Prototypes\n";
    }
    if (elExisting.checked) {
      content = content + "Rebuild existing product\n";
    }
    if (elMaintenanceProduct.checked) {
      content = content + "Maintenance of product\n";
    }
    elLineGame.style.display = "block";
    elLineGame.style.backgroundColor = "var(--blue-color)";
    setTextHtml(5, 6);
    contentFormGame4 = content;
  }
  
  var runRangerGame = function () {
    const parent = document.getElementById("slider3-container").parentNode;
    document.getElementById("slider3-container").remove();
    parent.innerHTML = ` <div class="slider-container"  id="slider3-container">
    <input type="text" id="slider3" class="slider" style="display:block"/>
  </div>`;
    new rSlider({
      target: "#slider3",
      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
      range: false,
      set: [1],
      onChange: function (vals) {
        newVal = vals;
      },
    });
  };
  btnSubmitGame4.addEventListener("click", function (e) {
    handleActiveFormGame4();
    if (bar2) bar2.style.display = "none";
    if (bar3) bar3.style.display = "block";
    runRangerGame();
  });
  
  function handleDeactiveFormGame5() {
    formGame4.style.display = "block";
    formGame5.style.display = "none";
    elLineGame.style.backgroundColor = "var(--white-color)";
    setTextHtml(4, 6);
  }
  btnBackGame5.addEventListener("click", function (e) {
    handleDeactiveFormGame5();
    content = contentFormGame3;
  });
  
  function handleActiveFormGame5() {
    formGame5.style.display = "none";
    formOther5.style.display = "block";
    elLine5.style.backgroundColor = "var(--blue-color)";
    let contentGame5 = "\n- Can we know more about your game?";
    content = content + contentGame5 + "\n";
    const contentDesGame = document.getElementById("contentDesGame").value;
    if (contentDesGame !== "") {
      content =
        content +
        "\n- Can you give us other short description of your project?\n" +
        contentDesGame +
        "\n";
    }
    const contentSimilarGame =
      document.getElementById("contentSimilarGame").value;
    if (contentSimilarGame !== "") {
      content =
        content +
        "\n- Is there similar game that you want to base on?\n" +
        contentSimilarGame +
        "\n";
    }
    const contentLikeGame = document.getElementById("contentLikeGame").value;
    if (contentLikeGame !== "") {
      content =
        content +
        "\n- What do you like/dislike about the similar game that you want to improve in your game?\n" +
        contentLikeGame +
        "\n";
    }
    setTextSlider();
    setTextHtml(6, 6);
  }
  
  btnSubmitGame5.addEventListener("click", function (e) {
    handleActiveFormGame5();
  });
  
  function onlyOne(checkbox) {
    checkboxes.forEach((item) => {
      if (item !== checkbox) {
        item.checked = false;
      }
      item.parentElement.style.borderColor = "#aabff2";
      aleartsurvey.style.display = "none";
    });
  }
  
  window.addEventListener("resize", () => {
    runRangerOther();
    runRangerGame();
  });
  